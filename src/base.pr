{*

Generate all border tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-border` blueprint

*}
:root {
{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Border", brand.id) ]}
    {[ inject "rendered-token-var" context token /]}
    

{[/]}
}

{*

Generate all color tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-color` blueprint

*}
:root {
{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Color", brand.id) ]}
    {[ inject "rendered-token-var" context token /]}
    

{[/]}
}

{*

Generate all gradient tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `gradient-color` blueprint

*}
:root {
{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Gradient", brand.id) ]}
    {[ inject "rendered-token-var" context token /]}
    

{[/]}
}

{*

Generate all measure tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-measure` blueprint

*}
:root {
{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Measure", brand.id) ]}
    {[ inject "rendered-token-var" context token /]}
    

{[/]}
}

{*

Generate all shadow tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `shadow-color` blueprint

*}
:root {
{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Shadow", brand.id) ]}
    {[ inject "rendered-token-var" context token /]}
    

{[/]}
}

{*

Generate all typography tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-color` blueprint

*}
{[ let brand = ds.currentBrand() /]}
{[ const allTokens = ds.tokensByType("Typography", brand.id) /]}
{[ for token in allTokens ]}
{[ if !token.referencedToken ]}
{[ inject "rendered-token-class" context { "token": token, "allTokens": allTokens } /]}    


{[/]}
{[/]}
